environment:
  name: dev
  sdlcEnv: dev
  clusterId: "111"

application:
  type: Service
  cmdb:
    applicationID: A0000
    applicationName: "default-service"
  environmentVariables:
    APPLICATION_NAME: "default-service"
  
registry:
  url: "docker.io"
  image:
    repository: "nginx"
    tag: "latest"
    imagePullSecrets: []
  pullPolicy: IfNotPresent

service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 80
  protocol: TCP

deployment:
  enabled: true
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  podSecurityContext:
    runAsNonRoot: true
    fsGroup: 1000
  podAnnotations: {}
  podLabels: {}
  containers:
    - name: app
      ports:
        - name: http
          containerPort: 80
          protocol: TCP
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
      livenessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 30
        periodSeconds: 10
      readinessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 5
        periodSeconds: 10
      resources:
        requests:
          memory: 128Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 200m
      volumeMounts: []
      env: []
  initContainers: []
  sidecars: []
  volumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []

statefulset:
  enabled: false
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  podSecurityContext:
    runAsNonRoot: true
    fsGroup: 1000
  podAnnotations: {}
  podLabels: {}
  containers:
    - name: app
      ports:
        - name: http
          containerPort: 80
          protocol: TCP
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
      livenessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 30
        periodSeconds: 10
      readinessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 5
        periodSeconds: 10
      resources:
        requests:
          memory: 128Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 200m
      volumeMounts: []
      env: []
  initContainers: []
  sidecars: []
  volumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []

configMap:
  enabled: false
  annotations: {}
  data: {}
  files: {}

secrets:
  # Preferred: External Secret Manager (e.g., AWS Secrets Manager, GCP Secret Manager, etc.)
  secretmanager:
    enabled: false             # Enable external Secret Manager integration
    refreshInterval: "1h"     # Frequency at which secrets are refreshed
    secretStoreRef:
      name: "secretmanager-secret-store"  # Reference to the external manager's ClusterSecretStore
    data:
      mySecretKey: "secretmanager/path/to/secret"  # Map your local key to the remote secret path

  # Conjur using the authn‑k8s approach
  conjur:
    enabled: false             # Enable Conjur secret management
    authk8s:
      enabled: true             # Enable Conjur authn‑k8s integration
      serviceAccount: "conjur-auth"   # Kubernetes ServiceAccount annotated for Conjur authentication
      role: "my-app-role"         # Conjur role associated with the ServiceAccount
      applianceUrl: "https://conjur.example.com"  # Conjur appliance URL
      account: "myconjuraccount"  # Conjur account name
    refreshInterval: "1h"         # Frequency to refresh secrets
    secretStoreRef:
      name: "conjur-secret-store" # Reference to the Conjur SecretStore resource in your cluster
    data:
      mySecretKey: "conjur/path/to/secret"  # Map your local key to the Conjur secret key path

  # Fallback: Native Kubernetes Secrets
  kubernetes:
    enabled: true             # Enable native Kubernetes Secrets
    annotations: {}           # Additional annotations for the secret (if any)
    data:
      mySecretKey: "base64encodedvalue"  # Provide key-value pairs (values must be Base64 encoded)


certificate:
  enabled: false  
  dnsNames:
    - "myapp.example.com"
    - "www.myapp.example.com"

  venafi:
    enabled: true                # Enable Venafi-specific certificate provisioning
    issuerName: "venafi-issuer"    # Issuer name for Venafi
    secretName: "venafi-app-tls"   # Secret name when using Venafi
    zone: "example-zone"           # Venafi zone for certificate issuance
    tppUrl: "https://tpp.example.com"  # Venafi TPP URL
    credentialsRef: "venafi-credentials"  # Kubernetes Secret holding Venafi credentials

  acm:
    enabled: false               # Enable ACM-specific certificate provisioning if needed
    issuerName: "acm-issuer"      # Issuer name for ACM
    secretName: "acm-app-tls"     # Secret name when using ACM
    region: "us-west-2"           # AWS region for ACM integration

  appviewx:
    enabled: false               # Enable AppViewX-specific certificate provisioning if needed
    issuerName: "appviewx-issuer" # Issuer name for AppViewX
    secretName: "appviewx-app-tls" # Secret name when using AppViewX
    apiUrl: "https://appviewx.example.com/api"  # AppViewX API URL
    credentialsRef: "appviewx-credentials"      # Kubernetes Secret holding AppViewX credentials



persistence:
  enabled: false
  mountPath: /data
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClass: ""
  annotations: {}

ingress:
  enabled: true
  ingressClassName: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: "{{ .Values.application.cmdb.applicationName }}-{{ .Values.environment.name }}.{{ .Release.Namespace }}.svc.cluster.local"
      paths:
        - path: /
          pathType: Prefix
  tls: []

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

istio:
  enabled: true
  jwt:
    enabled: true
    # Configure one or more JWT issuers if required
    issuers:
      - issuer: "https://jwt-issuer.example.com"
        jwksUri: "https://jwt-issuer.example.com/.well-known/jwks.json"
        # Optionally specify audiences if needed:
        # audiences:
        #   - "my-audience"
  mtls:
    enabled: true
  virtualService:
    # List one or more hosts that the VirtualService will serve
    hosts:
      - "myapp.example.com"
    # Define the gateways (for example, mesh or a specific ingress gateway)
    gateways:
      - "mesh"
    http:
      # Optional match rules (for example, based on headers)
      match: []
      retries:
        attempts: 3
        perTryTimeout: "2s"
        retryOn: "connect-failure,refused-stream"
      timeout: "15s"


